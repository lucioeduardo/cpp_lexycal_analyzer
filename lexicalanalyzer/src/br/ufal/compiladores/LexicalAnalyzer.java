/* The following code was generated by JFlex 1.6.1 */

package br.ufal.compiladores;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/eduardo/git/lex-repository/lexicalanalyzer/src/br/ufal/compiladores/cpp.flex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\4\1\4\1\3\22\0\1\1\1\60\1\100"+
    "\1\44\1\0\1\36\1\50\1\105\1\101\1\102\1\5\1\31\1\103"+
    "\1\32\1\26\1\2\1\12\1\21\1\73\1\72\2\10\1\71\3\10"+
    "\1\42\1\104\1\35\1\62\1\40\2\0\1\13\1\20\2\13\1\30"+
    "\1\34\5\6\1\23\10\6\1\25\2\6\1\16\2\6\1\0\1\11"+
    "\1\43\1\53\1\63\1\0\1\45\1\17\1\14\1\47\1\27\1\33"+
    "\1\65\1\70\1\61\1\6\1\67\1\22\1\55\1\46\1\51\1\56"+
    "\1\64\1\52\1\66\1\57\1\24\1\76\1\75\1\15\1\74\1\77"+
    "\1\37\1\7\1\41\1\54\6\0\1\4\u1fa2\0\1\4\1\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\2\2\6"+
    "\5\5\1\1\1\5\1\7\1\10\1\5\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\3\5\1\21"+
    "\2\5\1\22\1\23\3\5\1\24\1\5\1\25\4\5"+
    "\1\1\1\26\1\27\1\30\1\31\1\1\1\2\1\0"+
    "\1\32\1\33\1\5\1\34\3\6\5\0\14\5\1\6"+
    "\1\0\4\5\1\35\1\36\1\37\1\40\5\5\1\0"+
    "\1\41\1\13\1\42\1\43\1\44\1\20\1\45\1\46"+
    "\1\47\1\43\11\5\1\50\1\5\1\51\1\52\1\34"+
    "\3\5\1\53\7\5\1\54\1\50\1\5\1\55\10\5"+
    "\3\0\5\6\1\0\2\6\6\5\1\22\7\5\1\56"+
    "\7\5\1\50\2\5\1\57\1\0\1\60\2\5\1\51"+
    "\3\5\1\24\43\5\1\61\4\5\1\50\12\5\1\0"+
    "\24\5\1\62\13\5\1\50\1\23\4\5\1\63\1\5"+
    "\1\0\11\5\1\64\20\5\1\53\1\21\1\5\1\0"+
    "\1\52\2\5\1\54\7\5\1\50\2\5\1\0\1\65"+
    "\6\5\1\50\10\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\106\0\u0578\0\106"+
    "\0\u05be\0\106\0\106\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c"+
    "\0\u0762\0\u07a8\0\106\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906"+
    "\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\106\0\106"+
    "\0\106\0\106\0\u0af0\0\u0b36\0\u0b7c\0\106\0\106\0\u0bc2"+
    "\0\u0118\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac"+
    "\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc"+
    "\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\106\0\106\0\106\0\106\0\u1324"+
    "\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u1482\0\106"+
    "\0\u1482\0\u1482\0\u150e\0\106\0\u1554\0\106\0\106\0\u159a"+
    "\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\u1856\0\106\0\106\0\u189c\0\u18e2\0\u1928\0\u196e"+
    "\0\106\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58"+
    "\0\106\0\u1b9e\0\u1be4\0\106\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc"+
    "\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c"+
    "\0\106\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116"+
    "\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\106\0\u24ea\0\u2530"+
    "\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u0118\0\u26d4\0\u271a"+
    "\0\u1482\0\u2760\0\106\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee"+
    "\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e"+
    "\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e"+
    "\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\106\0\u3322\0\u3368"+
    "\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598"+
    "\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8"+
    "\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28"+
    "\0\u3c6e\0\u3cb4\0\u0118\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12"+
    "\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u0118"+
    "\0\u4042\0\u4088\0\u40ce\0\u4114\0\u0118\0\u415a\0\u41a0\0\u41e6"+
    "\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416"+
    "\0\u0118\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba\0\u4600"+
    "\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830"+
    "\0\u4876\0\u0118\0\u0118\0\u48bc\0\u4902\0\u0118\0\u4948\0\u498e"+
    "\0\u0118\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78"+
    "\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\106\0\u4cd6\0\u4d1c\0\u4d62"+
    "\0\u4da8\0\u4dee\0\u4e34\0\106\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c"+
    "\0\u4f92\0\u4fd8\0\u501e\0\u5064";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\0\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\6\1\12\1\13\1\6\1\14"+
    "\1\6\1\10\1\15\1\6\1\16\1\6\1\17\1\20"+
    "\1\6\1\21\1\22\1\23\1\6\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\2\6\1\52\1\53\2\6\3\10"+
    "\1\6\1\54\1\55\1\6\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\110\0\1\64\2\0\1\65\54\0\1\66"+
    "\105\0\1\67\31\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\1\6\1\71\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\16\0\1\10\1\0\1\10\6\0"+
    "\1\10\1\72\1\73\2\74\1\75\2\76\40\0\3\10"+
    "\22\0\1\77\1\0\1\77\2\0\2\100\2\101\1\77"+
    "\1\72\1\73\2\74\1\75\2\76\40\0\3\77\20\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\1\102\3\6"+
    "\1\0\2\6\2\0\2\6\10\0\1\103\2\6\1\0"+
    "\1\104\1\6\2\0\3\6\1\0\1\6\1\0\5\6"+
    "\1\105\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\1\106\1\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\1\107\1\110\2\0\3\6\1\0"+
    "\1\111\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\1\112\1\6\2\0\3\6"+
    "\1\0\1\113\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\1\6\1\114\1\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\3\6\1\115\2\6"+
    "\3\70\4\6\16\0\1\116\1\0\1\116\6\0\1\116"+
    "\4\0\1\117\42\0\3\116\20\0\2\6\1\70\1\0"+
    "\1\70\2\6\1\120\3\6\1\70\1\121\3\6\1\0"+
    "\2\6\2\0\2\6\10\0\1\6\1\122\1\6\1\0"+
    "\1\6\1\123\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\37\0\1\124\30\0\1\125\55\0\1\126"+
    "\27\0\1\127\31\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\1\130\3\6\1\0\2\6\2\0\2\6\10\0"+
    "\1\131\2\6\1\0\1\132\1\133\2\0\3\6\1\0"+
    "\1\134\1\0\6\6\3\70\4\6\6\0\35\135\1\136"+
    "\1\137\1\135\1\140\1\135\1\141\17\135\1\142\23\135"+
    "\40\0\1\30\1\0\1\143\17\0\1\144\63\0\1\145"+
    "\21\0\1\146\63\0\1\147\53\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\1\150\1\6\1\151\1\6\1\0"+
    "\2\6\2\0\2\6\10\0\1\6\1\152\1\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\3\6\1\153"+
    "\2\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\2\6\1\154\1\6\1\0\1\155\1\6"+
    "\2\0\2\6\10\0\1\156\2\6\1\0\1\157\1\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\1\160\1\6\2\0\2\6\10\0\3\6\1\0"+
    "\1\161\1\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\1\162\3\6\56\0\1\163\11\0\1\164\31\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\1\6\1\165"+
    "\2\0\1\6\1\166\1\6\1\0\1\6\1\0\6\6"+
    "\3\70\2\6\1\167\1\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\1\170\1\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\70\0\1\171\31\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\2\6\1\172"+
    "\1\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\2\6\1\173\1\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\1\6\1\174\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\1\175\1\6\2\0"+
    "\2\6\10\0\3\6\1\0\1\6\1\176\2\0\3\6"+
    "\1\0\1\6\1\0\5\6\1\177\3\70\1\200\3\6"+
    "\70\0\1\201\31\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\1\202\1\6\10\0"+
    "\1\6\1\203\1\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\70\0\1\204\31\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\1\151\1\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\2\6\1\205\1\0\1\206\1\0\5\6\1\207"+
    "\3\70\1\6\1\210\2\6\14\0\2\6\1\70\1\0"+
    "\1\70\1\6\1\211\4\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\5\6\1\212\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\1\213\1\6"+
    "\2\0\3\6\1\0\1\214\1\0\6\6\3\70\4\6"+
    "\62\0\1\215\31\0\3\216\1\0\5\216\1\0\73\216"+
    "\1\0\3\64\2\0\101\64\5\65\1\217\100\65\10\0"+
    "\1\70\1\0\1\70\6\0\1\70\47\0\3\70\34\0"+
    "\1\220\1\0\2\221\103\0\1\220\2\221\102\0\1\222"+
    "\1\223\72\0\1\116\1\0\1\116\6\0\1\116\47\0"+
    "\3\116\22\0\1\224\1\0\1\224\6\0\1\224\7\0"+
    "\2\225\36\0\3\224\22\0\1\77\1\0\1\77\6\0"+
    "\1\77\4\0\1\75\2\76\40\0\3\77\21\0\2\226"+
    "\1\0\3\226\2\0\3\226\5\0\2\226\2\0\2\226"+
    "\10\0\1\226\1\0\1\226\21\0\3\226\24\0\1\227"+
    "\6\0\1\227\72\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\1\230"+
    "\2\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\2\6\1\231\1\0\1\6"+
    "\1\0\3\6\1\232\2\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\1\6\1\233\1\6\1\0\2\6"+
    "\2\0\1\234\2\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\1\235\2\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\1\6\1\236\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\1\237\1\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\1\240\1\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\2\6\1\241"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\1\6\1\242\1\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\1\6\1\232\1\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\2\6"+
    "\1\243\1\0\2\6\2\0\3\6\1\0\1\244\1\0"+
    "\3\6\1\245\2\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\112\1\0\6\6\3\70\4\6\16\0\1\116\1\0"+
    "\1\116\6\0\1\116\2\221\3\0\2\76\2\0\2\221"+
    "\34\0\3\116\40\0\1\246\65\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\1\6\1\247\1\250"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\251\1\0\3\6\1\232\2\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\2\6"+
    "\1\153\1\6\1\0\2\6\2\0\2\6\10\0\2\6"+
    "\1\252\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\1\6\1\253\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\1\254\1\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\1\255\3\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\1\6\1\256\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\257\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\1\6\1\260\1\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\6\0\40\135\1\140\105\135\1\140\21\135\1\261"+
    "\23\135\36\0\1\262\131\0\1\263\31\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\264\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\2\6\1\265"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\2\6\1\266\1\0\2\6\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\1\256\2\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\1\267"+
    "\3\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\1\6\1\256\2\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\1\270\2\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\1\271\1\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\2\6\1\272"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\1\6\1\273\4\6\1\70\1\274"+
    "\3\6\1\0\2\6\2\0\1\275\1\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\2\6\1\276\1\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\1\6\1\277\1\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\1\300\5\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\1\301\1\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\1\302\1\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\2\6\1\303\1\0\1\304\1\0\2\6"+
    "\1\305\3\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\2\6\1\306\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\4\6\1\307\1\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\1\310\2\6\1\0\1\311"+
    "\1\6\2\0\3\6\1\0\1\312\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\1\313\2\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\2\6\1\314\1\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\1\256\3\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\1\6\1\315\2\0\3\6"+
    "\1\0\1\316\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\1\6"+
    "\1\317\1\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\1\6\1\320\1\243"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\1\6"+
    "\1\321\4\6\1\70\1\322\3\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\2\6\1\256"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\1\323\2\6\1\0\1\6\1\324"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\2\6\1\325\3\6"+
    "\3\70\3\6\1\326\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\1\327\1\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\330"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\5\6\1\331\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\332\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\1\333\3\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\334\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\1\6\1\335\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\106\0"+
    "\1\140\112\0\1\336\2\65\1\3\2\65\1\217\100\65"+
    "\24\0\2\221\102\0\1\221\106\0\1\221\72\0\1\224"+
    "\1\0\1\224\6\0\1\224\2\221\7\0\2\221\34\0"+
    "\3\224\22\0\1\224\1\0\1\224\6\0\1\224\47\0"+
    "\3\224\21\0\2\226\1\0\3\226\2\0\3\226\1\72"+
    "\1\73\2\74\1\0\2\226\2\0\2\226\10\0\1\226"+
    "\1\0\1\226\21\0\3\226\24\0\1\227\6\0\1\227"+
    "\1\72\1\73\2\74\66\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\3\6\1\316\2\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\1\6\1\337\4\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\1\256\1\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\2\6\1\340\1\0\1\6\1\0\3\6\1\341"+
    "\2\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\1\6\1\342\1\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\1\6\1\343\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\1\344\5\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\1\256\3\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\1\345\2\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\1\346\2\6"+
    "\1\0\1\347\1\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\2\6\1\256\3\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\1\251\1\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\1\350\1\6\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\351\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\1\352\3\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\1\327"+
    "\1\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\1\353\1\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\1\256\1\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\251\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\1\132\1\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\1\354\2\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\3\6\1\314\2\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\1\355\1\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\1\237\2\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\50\0\1\356\51\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\2\6\1\357\3\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\1\256\1\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\1\360\5\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\1\361\3\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\1\362\1\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\2\6\1\363"+
    "\3\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\1\364\5\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\1\365\3\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\1\366\1\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\1\367\2\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\113\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\4\6\1\332\1\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\1\370\2\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\1\371\1\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\1\6\1\372\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\1\6\1\373\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\2\6\1\353\1\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\1\6\1\374\1\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\375\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\1\276\2\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\1\376\3\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\2\6\1\377\3\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\2\6\1\u0100"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\2\6\1\u0101\1\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\1\6\1\u0102\1\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\1\u0103\1\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\1\u0104\1\6\2\0\2\6"+
    "\10\0\3\6\1\0\1\155\1\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\3\6\1\256\2\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\1\u0105\1\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\2\6\1\243\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\1\u0106\3\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\113\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\2\6\1\u0107\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\2\6\1\u0108\1\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\1\6\1\u0109\1\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\1\u010a\1\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\1\6"+
    "\1\354\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\2\6\1\231\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\1\u010b"+
    "\2\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\1\232\3\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\1\u010c\2\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\2\6\1\256\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\2\6"+
    "\1\u010d\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\6\1\0\5\6\1\256\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\u010e\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\2\6\1\u010f\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\1\u0110\3\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\u0111\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\1\70\1\u0112\1\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\1\u0113\1\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\4\6\1\256\1\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\1\6\1\u0114\1\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\1\6\1\u0115\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\1\6"+
    "\1\256\1\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\2\6\1\325\3\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\u0116\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\1\6\1\350\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\2\6\1\256\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\1\6\1\334\1\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\50\0\1\u0117\51\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\1\6\1\u0118\1\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\1\u0119"+
    "\1\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\1\6\1\u011a\1\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\3\6\1\u011b"+
    "\2\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\1\6\1\u011c\4\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\1\u011d\1\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\2\6"+
    "\1\u011e\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\2\6\1\232\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\2\6"+
    "\1\u011f\1\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\1\u0120\2\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\u0121\4\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\1\u0122\2\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\1\6\1\u0123\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\2\6\1\u0124\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\3\6\1\u0125\2\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\u0126\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\1\u0127\2\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\1\u0128\1\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\1\366\2\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\1\u0101\3\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\1\u0129\2\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\1\6\1\u012a\1\243\1\0"+
    "\2\6\2\0\3\6\1\0\1\334\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\2\6\1\u012b\1\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\u012c\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\1\6\1\354\4\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\1\334\1\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\1\251\1\6\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\1\6\1\u012d"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\2\6\1\212\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\2\6\1\260\1\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\1\6\1\u012e\1\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\1\u012f\1\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\1\u0130\5\6\3\70\4\6\16\0"+
    "\1\70\1\0\1\70\6\0\1\70\47\0\1\u0131\2\70"+
    "\22\0\1\70\1\0\1\70\6\0\1\70\47\0\2\70"+
    "\1\u0131\20\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\1\6\1\u0132"+
    "\4\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\2\6\1\u0133\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\1\6\1\u0134\4\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\52\0\1\u0135"+
    "\47\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\1\316\2\6\1\0"+
    "\1\251\1\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\u0136\4\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\2\6\1\132\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\1\6\1\u0137"+
    "\1\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\1\u0138\1\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\1\6\1\u0139\4\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\1\u013a\3\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\1\354\3\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\u013b"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\2\6\1\253\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\u012b\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\1\u013c\1\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\2\6"+
    "\1\u013d\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\1\6\1\256\4\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\1\256\2\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\1\6"+
    "\1\u013e\4\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\2\6\1\u013f\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\1\u0140\2\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\2\6\1\232\1\0\2\6\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\1\6\1\u0141\4\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\0\1\6\1\0\1\354\5\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\2\6\1\232\1\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\2\6\1\u0142\3\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\1\6\1\u0143\4\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\16\0\1\70\1\0\1\70\6\0\1\70\41\0\1\u0144"+
    "\5\0\3\70\20\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\0\1\354\1\0\6\6"+
    "\3\70\4\6\52\0\1\u0145\47\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\2\6\2\0\2\6"+
    "\10\0\1\u0146\2\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\1\6\1\354"+
    "\1\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\1\6\1\232\1\6\1\0\1\6\1\0\6\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\1\6\1\u0147"+
    "\4\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\1\6\1\u0148\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\1\0\1\132\1\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\3\6\1\0"+
    "\1\6\1\0\6\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\2\6\2\0"+
    "\2\6\10\0\3\6\1\0\2\6\2\0\2\6\1\u0109"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\1\u0149\5\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\1\232\2\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\1\u014a\5\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\1\6\1\132\1\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\1\u014b\2\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\65\0\1\u014c\34\0\2\6"+
    "\1\70\1\0\1\70\1\6\1\232\4\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\1\u0130\5\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\2\6\2\0\1\6\1\u014d\1\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\1\u014e\3\6\1\0\2\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\14\0\2\6\1\70\1\0"+
    "\1\70\1\6\1\u0143\4\6\1\70\4\6\1\0\2\6"+
    "\2\0\2\6\10\0\1\u014f\2\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\6\1\0\6\6\3\70\4\6\14\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\1\0"+
    "\2\6\2\0\2\6\10\0\3\6\1\0\2\6\2\0"+
    "\3\6\1\0\1\6\1\0\3\6\1\354\2\6\3\70"+
    "\4\6\14\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\1\0\2\6\2\0\2\6\10\0\3\6\1\0"+
    "\1\6\1\u0150\2\0\3\6\1\0\1\6\1\0\6\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\1\u0151\1\6\2\0\3\6\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\2\6\2\0\2\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\0\1\6\1\0"+
    "\3\6\1\u0152\2\6\3\70\4\6\14\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\1\0\1\u0153\1\6"+
    "\2\0\2\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\0\1\6\1\0\6\6\3\70\4\6\14\0\2\6"+
    "\1\70\1\0\1\70\1\6\1\260\4\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\6\6\3\70\4\6"+
    "\14\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\1\0\2\6\2\0\2\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\0\1\6\1\0\3\6\1\u0154\2\6"+
    "\3\70\4\6\14\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\1\0\2\6\2\0\2\6\10\0\3\6"+
    "\1\0\2\6\2\0\2\6\1\u0147\1\0\1\6\1\0"+
    "\6\6\3\70\4\6\14\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\1\0\1\327\1\6\2\0\2\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\0\1\6"+
    "\1\0\6\6\3\70\4\6\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\22\1\1\11\1\1\1\11\1\1\2\11"+
    "\7\1\1\11\13\1\4\11\2\1\1\0\2\11\5\1"+
    "\5\0\15\1\1\0\4\1\4\11\5\1\1\0\2\1"+
    "\1\11\3\1\1\11\1\1\2\11\13\1\2\11\4\1"+
    "\1\11\7\1\1\11\2\1\1\11\10\1\3\0\1\1"+
    "\1\11\3\1\1\0\20\1\1\11\13\1\1\0\1\11"+
    "\52\1\1\11\17\1\1\0\50\1\1\0\35\1\1\0"+
    "\16\1\1\0\1\11\6\1\1\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private CppToken createToken(String name, String value) {
    return new CppToken(name, value, yyline, yycolumn);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public CppToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
          case 54: break;
          case 2: 
            { 
            }
          case 55: break;
          case 3: 
            { return createToken("operator","division");
            }
          case 56: break;
          case 4: 
            { return createToken("operator", "asterisk");
            }
          case 57: break;
          case 5: 
            { return createToken("identifier", yytext());
            }
          case 58: break;
          case 6: 
            { return createToken("number", yytext());
            }
          case 59: break;
          case 7: 
            { return createToken("operator","addition");
            }
          case 60: break;
          case 8: 
            { return createToken("operator","subtraction");
            }
          case 61: break;
          case 9: 
            { return createToken("operator","lessThan");
            }
          case 62: break;
          case 10: 
            { return createToken("operator","modulus");
            }
          case 63: break;
          case 11: 
            { return createToken("operator", "bracesLeft");
            }
          case 64: break;
          case 12: 
            { return createToken("operator","greaterThan");
            }
          case 65: break;
          case 13: 
            { return createToken("operator", "bracesRight");
            }
          case 66: break;
          case 14: 
            { return createToken("operator", "colon");
            }
          case 67: break;
          case 15: 
            { return createToken("operator", "bracketsRight");
            }
          case 68: break;
          case 16: 
            { return createToken("operator", "preProcessor");
            }
          case 69: break;
          case 17: 
            { return createToken("operator","bitAnd");
            }
          case 70: break;
          case 18: 
            { return createToken("operator","xor");
            }
          case 71: break;
          case 19: 
            { return createToken("operator","bitNot");
            }
          case 72: break;
          case 20: 
            { return createToken("operator","not");
            }
          case 73: break;
          case 21: 
            { return createToken("operator","assignment");
            }
          case 74: break;
          case 22: 
            { return createToken("operator", "parenthesesLeft");
            }
          case 75: break;
          case 23: 
            { return createToken("operator", "parenthesesRight");
            }
          case 76: break;
          case 24: 
            { return createToken("operator", "comma");
            }
          case 77: break;
          case 25: 
            { return createToken("operator", "semiColon");
            }
          case 78: break;
          case 26: 
            { return createToken("operator","divAssign");
            }
          case 79: break;
          case 27: 
            { return createToken("operator","multAssign");
            }
          case 80: break;
          case 28: 
            { return createToken("operator","or");
            }
          case 81: break;
          case 29: 
            { return createToken("operator","increment");
            }
          case 82: break;
          case 30: 
            { return createToken("operator","addAssign");
            }
          case 83: break;
          case 31: 
            { return createToken("operator","decrement");
            }
          case 84: break;
          case 32: 
            { return createToken("operator","subAssign");
            }
          case 85: break;
          case 33: 
            { return createToken("operator","leftShift");
            }
          case 86: break;
          case 34: 
            { String str = yytext();
                    str = str.substring(1, str.length()-1);
                    return createToken("header", str);
            }
          case 87: break;
          case 35: 
            { return createToken("operator", "bracketsLeft");
            }
          case 88: break;
          case 36: 
            { return createToken("operator","greaterEqTo");
            }
          case 89: break;
          case 37: 
            { return createToken("operator","modAssign");
            }
          case 90: break;
          case 38: 
            { return createToken("operator","rightShift");
            }
          case 91: break;
          case 39: 
            { return createToken("operator","lessEqTo");
            }
          case 92: break;
          case 40: 
            { return createToken("keyword", yytext());
            }
          case 93: break;
          case 41: 
            { return createToken("operator","and");
            }
          case 94: break;
          case 42: 
            { return createToken("operator","andAssign");
            }
          case 95: break;
          case 43: 
            { return createToken("operator","xorAssign");
            }
          case 96: break;
          case 44: 
            { return createToken("operator","notEqualsTo");
            }
          case 97: break;
          case 45: 
            { return createToken("operator","equalsTo");
            }
          case 98: break;
          case 46: 
            { return createToken("operator", "ellipsis");
            }
          case 99: break;
          case 47: 
            { return createToken("operator","leftShiftAssign");
            }
          case 100: break;
          case 48: 
            { return createToken("operator","rightShiftAssign");
            }
          case 101: break;
          case 49: 
            { return createToken("character_literal", yytext());
            }
          case 102: break;
          case 50: 
            { return createToken("boolean", yytext());
            }
          case 103: break;
          case 51: 
            { return createToken("operator","bitOr");
            }
          case 104: break;
          case 52: 
            { return createToken("operator","orAssign");
            }
          case 105: break;
          case 53: 
            { return createToken("operator", "macro");
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
