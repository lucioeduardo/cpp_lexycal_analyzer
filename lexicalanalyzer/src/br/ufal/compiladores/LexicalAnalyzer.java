/* The following code was generated by JFlex 1.6.1 */

package br.ufal.compiladores;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/Estudo/Git/cpp_lexycal_analyzer/lexicalanalyzer/src/br/ufal/compiladores/cpp.flex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\5\1\5\1\4\22\0\1\1\1\63\1\13"+
    "\1\47\1\0\1\41\1\53\1\12\1\103\1\104\1\6\1\34\1\105"+
    "\1\35\1\31\1\2\1\15\1\24\1\76\1\75\2\11\1\74\3\11"+
    "\1\45\1\106\1\40\1\65\1\43\2\0\1\16\1\23\2\16\1\33"+
    "\1\37\5\7\1\26\10\7\1\30\2\7\1\21\2\7\1\0\1\14"+
    "\1\46\1\56\1\66\1\0\1\50\1\22\1\17\1\52\1\32\1\36"+
    "\1\70\1\73\1\64\1\7\1\72\1\25\1\60\1\51\1\54\1\61"+
    "\1\67\1\55\1\71\1\62\1\27\1\101\1\100\1\20\1\77\1\102"+
    "\1\42\1\10\1\44\1\57\6\0\1\5\u1fa2\0\1\5\1\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\1\1\1\7\1\6\5\5\1\1\1\5\1\10\1\11"+
    "\1\5\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\3\5\1\22\2\5\1\23\1\24\3\5\1\25"+
    "\1\5\1\26\4\5\1\27\1\30\1\31\1\32\1\33"+
    "\2\34\1\35\1\0\1\2\1\0\1\36\1\37\1\5"+
    "\1\40\3\6\7\0\14\5\1\6\1\0\4\5\1\41"+
    "\1\42\1\43\1\44\5\5\1\0\1\45\1\14\1\46"+
    "\1\47\1\50\1\21\1\51\1\52\1\53\1\47\11\5"+
    "\1\54\1\5\1\55\1\56\1\40\3\5\1\57\7\5"+
    "\1\60\1\54\1\5\1\61\10\5\1\62\1\63\1\0"+
    "\5\6\1\0\1\64\2\6\6\5\1\23\7\5\1\65"+
    "\7\5\1\54\2\5\1\66\1\0\1\67\2\5\1\55"+
    "\3\5\1\25\47\5\1\54\12\5\1\0\24\5\1\70"+
    "\13\5\1\54\1\24\4\5\1\71\1\5\1\0\11\5"+
    "\1\72\20\5\1\57\1\22\1\5\1\0\1\56\2\5"+
    "\1\60\7\5\1\54\2\5\1\0\1\73\6\5\1\54"+
    "\10\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\216\0\325\0\u011c\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\216\0\u0661\0\216\0\u06a8\0\216\0\216\0\u06ef\0\u0736"+
    "\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899\0\216\0\u08e0\0\u0927"+
    "\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f"+
    "\0\216\0\216\0\216\0\216\0\u0ba6\0\216\0\u0bed\0\216"+
    "\0\u0c34\0\u0c7b\0\u0cc2\0\216\0\216\0\u0d09\0\u0163\0\u0d50"+
    "\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88"+
    "\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0"+
    "\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8"+
    "\0\u143f\0\u1486\0\u14cd\0\216\0\216\0\216\0\216\0\u1514"+
    "\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1677\0\216"+
    "\0\u1677\0\u1677\0\u1705\0\216\0\u174c\0\216\0\216\0\u1793"+
    "\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb"+
    "\0\u1a12\0\u1a59\0\216\0\216\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75"+
    "\0\216\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66"+
    "\0\216\0\u1dad\0\u1df4\0\216\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10"+
    "\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\216\0\216\0\u2073\0\u20ba"+
    "\0\216\0\u2101\0\u2148\0\u218f\0\u21d6\0\216\0\u221d\0\u2264"+
    "\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c"+
    "\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\216\0\u268d"+
    "\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u0163\0\u287e"+
    "\0\u28c5\0\u1677\0\u290c\0\216\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98"+
    "\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0"+
    "\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308"+
    "\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540"+
    "\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778"+
    "\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0"+
    "\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8"+
    "\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20"+
    "\0\u3e67\0\u3eae\0\u0163\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca\0\u4011"+
    "\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202\0\u0163"+
    "\0\u4249\0\u4290\0\u42d7\0\u431e\0\u0163\0\u4365\0\u43ac\0\u43f3"+
    "\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b"+
    "\0\u0163\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5\0\u481c"+
    "\0\u4863\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u4a54"+
    "\0\u4a9b\0\u0163\0\u0163\0\u4ae2\0\u4b29\0\u0163\0\u4b70\0\u4bb7"+
    "\0\u0163\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a\0\u4d61\0\u4da8"+
    "\0\u4def\0\u4e36\0\u4e7d\0\u4ec4\0\216\0\u4f0b\0\u4f52\0\u4f99"+
    "\0\u4fe0\0\u5027\0\u506e\0\216\0\u50b5\0\u50fc\0\u5143\0\u518a"+
    "\0\u51d1\0\u5218\0\u525f\0\u52a6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\4\1\0\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\3\1\14\1\7\1\15\1\16"+
    "\1\7\1\17\1\7\1\11\1\20\1\7\1\21\1\7"+
    "\1\22\1\23\1\7\1\24\1\25\1\26\1\7\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\2\7\1\55\1\56"+
    "\2\7\3\11\1\7\1\57\1\60\1\7\1\61\1\62"+
    "\1\63\1\64\3\65\1\66\1\67\6\65\1\70\1\71"+
    "\72\65\111\0\1\72\3\0\1\73\56\0\1\74\106\0"+
    "\1\75\30\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\1\7\1\77\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\15\0\1\11\3\0\1\11\6\0\1\11"+
    "\1\100\1\101\2\102\1\103\2\104\40\0\3\11\10\0"+
    "\3\105\2\0\5\105\1\0\1\105\1\0\72\105\57\0"+
    "\1\106\40\0\1\107\3\0\1\107\2\0\2\110\2\111"+
    "\1\107\1\100\1\101\2\102\1\103\2\104\40\0\3\107"+
    "\17\0\2\7\1\76\3\0\1\76\6\7\1\76\1\112"+
    "\3\7\1\0\2\7\2\0\2\7\10\0\1\113\2\7"+
    "\1\0\1\114\1\7\2\0\3\7\1\0\1\7\1\0"+
    "\5\7\1\115\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\1\116\1\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\1\117\1\120\2\0\3\7"+
    "\1\0\1\121\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\1\122\1\7\2\0"+
    "\3\7\1\0\1\123\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\1\7\1\124\1\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\3\7\1\125"+
    "\2\7\3\76\4\7\15\0\1\126\3\0\1\126\6\0"+
    "\1\126\4\0\1\127\42\0\3\126\17\0\2\7\1\76"+
    "\3\0\1\76\2\7\1\130\3\7\1\76\1\131\3\7"+
    "\1\0\2\7\2\0\2\7\10\0\1\7\1\132\1\7"+
    "\1\0\1\7\1\133\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\40\0\1\134\30\0\1\135\56\0"+
    "\1\136\27\0\1\137\30\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\1\140\3\7\1\0\2\7\2\0\2\7"+
    "\10\0\1\141\2\7\1\0\1\142\1\143\2\0\3\7"+
    "\1\0\1\144\1\0\6\7\3\76\4\7\4\0\40\145"+
    "\1\146\1\147\1\145\1\150\1\145\1\151\17\145\1\152"+
    "\21\145\43\0\1\33\1\0\1\153\17\0\1\154\64\0"+
    "\1\155\21\0\1\156\64\0\1\157\52\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\1\160\1\7\1\161\1\7"+
    "\1\0\2\7\2\0\2\7\10\0\1\7\1\162\1\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\3\7"+
    "\1\163\2\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\2\7\1\164\1\7\1\0\1\165"+
    "\1\7\2\0\2\7\10\0\1\166\2\7\1\0\1\167"+
    "\1\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\1\170\1\7\2\0\2\7\10\0\3\7"+
    "\1\0\1\171\1\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\1\172\3\7\57\0\1\173\11\0\1\174"+
    "\30\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\1\7"+
    "\1\175\2\0\1\7\1\176\1\7\1\0\1\7\1\0"+
    "\6\7\3\76\2\7\1\177\1\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\1\200\1\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\71\0\1\201"+
    "\30\0\2\7\1\76\3\0\1\76\6\7\1\76\2\7"+
    "\1\202\1\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\2\7\1\203\1\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\1\7\1\204\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\1\205\1\7"+
    "\2\0\2\7\10\0\3\7\1\0\1\7\1\206\2\0"+
    "\3\7\1\0\1\7\1\0\5\7\1\207\3\76\1\210"+
    "\3\7\71\0\1\211\30\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\1\212\1\7"+
    "\10\0\1\7\1\213\1\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\71\0\1\214"+
    "\30\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\1\161"+
    "\1\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\2\7\1\215\1\0\1\216\1\0\5\7"+
    "\1\217\3\76\1\7\1\220\2\7\13\0\2\7\1\76"+
    "\3\0\1\76\1\7\1\221\4\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\5\7\1\222\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\1\223"+
    "\1\7\2\0\3\7\1\0\1\224\1\0\6\7\3\76"+
    "\4\7\4\0\3\65\2\0\6\65\2\0\72\65\3\0"+
    "\1\66\125\0\1\225\37\0\1\226\24\0\3\72\3\0"+
    "\101\72\6\73\1\227\100\73\11\0\1\76\3\0\1\76"+
    "\6\0\1\76\47\0\3\76\35\0\1\230\1\0\2\231"+
    "\104\0\1\230\2\231\103\0\1\232\1\233\71\0\1\126"+
    "\3\0\1\126\6\0\1\126\47\0\3\126\21\0\1\234"+
    "\3\0\1\234\6\0\1\234\7\0\2\235\36\0\3\234"+
    "\22\0\1\236\107\0\1\150\104\0\1\107\3\0\1\107"+
    "\6\0\1\107\4\0\1\103\2\104\40\0\3\107\20\0"+
    "\2\237\3\0\3\237\2\0\3\237\5\0\2\237\2\0"+
    "\2\237\10\0\1\237\1\0\1\237\21\0\3\237\25\0"+
    "\1\240\6\0\1\240\71\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\1\241\2\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\2\7\1\242\1\0"+
    "\1\7\1\0\3\7\1\243\2\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\1\7\1\244\1\7\1\0"+
    "\2\7\2\0\1\245\2\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\1\246"+
    "\2\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\1\7\1\247\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\1\250\1\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\1\251\1\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\2\7"+
    "\1\252\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\1\7\1\253\1\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\1\7\1\243"+
    "\1\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\2\7\1\254\1\0\2\7\2\0\3\7\1\0\1\255"+
    "\1\0\3\7\1\256\2\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\122\1\0\6\7\3\76\4\7\15\0\1\126"+
    "\3\0\1\126\6\0\1\126\2\231\3\0\2\104\2\0"+
    "\2\231\34\0\3\126\41\0\1\257\64\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\1\7\1\260"+
    "\1\261\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\262\1\0\3\7\1\243\2\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\2\7\1\163\1\7\1\0\2\7\2\0\2\7\10\0"+
    "\2\7\1\263\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\1\7\1\264\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\1\265\1\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\1\266\3\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\1\7\1\267"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\270\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\1\7\1\271\1\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\4\0\43\145\1\150\106\145\1\150\21\145"+
    "\1\272\21\145\41\0\1\273\132\0\1\274\30\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\275\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\2\7"+
    "\1\276\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\2\7\1\277\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\1\267\2\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\1\300\3\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\1\7\1\267\2\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\1\301\2\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\1\302\1\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\2\7"+
    "\1\303\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\1\7\1\304\4\7\1\76"+
    "\1\305\3\7\1\0\2\7\2\0\1\306\1\7\10\0"+
    "\3\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\2\7\1\307\1\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\1\7\1\310\1\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\1\311\5\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\1\312\1\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\1\313\1\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\2\7\1\314\1\0\1\315\1\0"+
    "\2\7\1\316\3\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\2\7\1\317"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\4\7\1\320\1\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\1\321\2\7\1\0"+
    "\1\322\1\7\2\0\3\7\1\0\1\323\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\1\324\2\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\2\7\1\325\1\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\1\267\3\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\1\7\1\326\2\0"+
    "\3\7\1\0\1\327\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\1\7\1\330\1\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\1\7\1\331"+
    "\1\254\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\1\7\1\332\4\7\1\76\1\333\3\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\2\7"+
    "\1\267\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\1\334\2\7\1\0\1\7"+
    "\1\335\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\2\7\1\336"+
    "\3\7\3\76\3\7\1\337\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\1\340\1\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\341\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\5\7\1\342\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\343\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\1\344\3\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\345\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\1\7\1\346"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\4\0\2\73\1\4\3\73\1\227\100\73\27\0\2\231"+
    "\103\0\1\231\107\0\1\231\71\0\1\234\3\0\1\234"+
    "\6\0\1\234\2\231\7\0\2\231\34\0\3\234\21\0"+
    "\1\234\3\0\1\234\6\0\1\234\47\0\3\234\20\0"+
    "\2\237\3\0\3\237\2\0\3\237\1\100\1\101\2\102"+
    "\1\0\2\237\2\0\2\237\10\0\1\237\1\0\1\237"+
    "\21\0\3\237\25\0\1\240\6\0\1\240\1\100\1\101"+
    "\2\102\65\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\3\7\1\327"+
    "\2\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\1\7\1\347\4\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\1\267\1\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\2\7"+
    "\1\350\1\0\1\7\1\0\3\7\1\351\2\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\1\7\1\352\1\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\1\7\1\353\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\354\5\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\1\267\3\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\1\355\2\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\1\356\2\7\1\0\1\357"+
    "\1\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\2\7\1\267"+
    "\3\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\1\262\1\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\1\360\1\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\361\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\1\362\3\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\1\340\1\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\1\363\1\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\1\267\1\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\262\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\1\142\1\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\1\364"+
    "\2\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\3\7\1\325\2\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\1\365\1\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\1\250\2\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\51\0"+
    "\1\366\50\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\2\7\1\367"+
    "\3\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\1\267\1\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\370\5\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\1\371\3\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\1\372"+
    "\1\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\2\7\1\373\3\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\1\374\5\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\1\375\3\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\1\376\1\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\1\377\2\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\123\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\4\7\1\343\1\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\1\u0100\2\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\1\u0101\1\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\1\7\1\u0102\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\1\7\1\u0103\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\2\7\1\363\1\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\1\7\1\u0104\1\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\u0105\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\1\307\2\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\1\u0106"+
    "\3\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\2\7\1\u0107"+
    "\3\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\2\7\1\u0108\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\2\7\1\u0109\1\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\1\7"+
    "\1\u010a\1\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\1\u010b\1\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\1\u010c\1\7\2\0\2\7\10\0\3\7"+
    "\1\0\1\165\1\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\3\7\1\267\2\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\1\u010d\1\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\2\7\1\254\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\1\u010e\3\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\123\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\2\7\1\u010f\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\2\7\1\u0110\1\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\1\7\1\u0111\1\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\1\u0112\1\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\1\7\1\364\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\2\7\1\242\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\1\u0113\2\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\1\243\3\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\1\u0114"+
    "\2\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\2\7\1\267\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\2\7\1\u0115\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\5\7\1\267\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\u0116\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\2\7"+
    "\1\u0117\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\1\u0118\3\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\u0119\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\1\76\1\u011a"+
    "\1\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\1\u011b\1\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\4\7\1\267\1\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\1\7\1\u011c\1\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\1\7\1\u011d"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\1\7\1\267\1\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\2\7"+
    "\1\336\3\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\u011e"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\1\7\1\360\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\2\7\1\267"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\1\7\1\345\1\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\51\0\1\u011f\50\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\1\7"+
    "\1\u0120\1\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\1\u0121\1\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\1\7\1\u0122"+
    "\1\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\3\7\1\u0123\2\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\1\7\1\u0124"+
    "\4\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\1\u0125\1\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\2\7\1\u0126\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\2\7\1\243"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\2\7\1\u0127\1\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\1\u0128\2\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\1\7\1\u0129"+
    "\4\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\1\u012a\2\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\1\7\1\u012b\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\2\7\1\u012c"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\3\7\1\u012d\2\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\u012e\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\1\u012f\2\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\1\u0130\1\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\1\376"+
    "\2\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\1\u0109\3\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\1\u0131\2\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\1\7\1\u0132\1\254\1\0\2\7\2\0"+
    "\3\7\1\0\1\345\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\2\7\1\u0133"+
    "\1\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\u0134\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\1\7\1\364"+
    "\4\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\1\345\1\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\1\262\1\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\1\7\1\u0135\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\2\7"+
    "\1\222\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\2\7\1\271"+
    "\1\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\1\7\1\u0136"+
    "\1\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\1\u0137\1\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\u0138\5\7\3\76\4\7\15\0\1\76\3\0"+
    "\1\76\6\0\1\76\47\0\1\u0139\2\76\21\0\1\76"+
    "\3\0\1\76\6\0\1\76\47\0\2\76\1\u0139\17\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\u013a\4\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\2\7\1\u013b"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\1\7"+
    "\1\u013c\4\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\53\0\1\u013d\46\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\1\327\2\7\1\0\1\262\1\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\1\7\1\u013e\4\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\2\7\1\142\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\1\7\1\u013f\1\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\1\u0140\1\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\u0141\4\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\1\u0142"+
    "\3\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\1\364\3\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\u0143\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\2\7\1\264\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\3\7\1\0\1\u0133\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\1\u0144\1\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\2\7\1\u0145\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\1\7\1\267\4\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\1\267\2\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\1\7\1\u0146\4\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\2\7"+
    "\1\u0147\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\1\u0148\2\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\2\7\1\243\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\1\7\1\u0149\4\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\1\364\5\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\2\7"+
    "\1\243\1\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\2\7"+
    "\1\u014a\3\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\1\7\1\u014b\4\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\15\0\1\76"+
    "\3\0\1\76\6\0\1\76\41\0\1\u014c\5\0\3\76"+
    "\17\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\3\7\1\0\1\364\1\0\6\7\3\76\4\7"+
    "\53\0\1\u014d\46\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\2\7\2\0\2\7\10\0\1\u014e"+
    "\2\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\1\7\1\364\1\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\1\7\1\243"+
    "\1\7\1\0\1\7\1\0\6\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\1\7\1\u014f\4\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\1\7\1\u0150\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\6\7"+
    "\1\76\4\7\1\0\1\142\1\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\6\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\2\7\2\0\2\7\10\0"+
    "\3\7\1\0\2\7\2\0\2\7\1\u0111\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\6\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\u0151\5\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\1\243\2\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\u0152\5\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\1\7\1\142\1\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\1\u0153\2\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\66\0\1\u0154\33\0\2\7\1\76\3\0"+
    "\1\76\1\7\1\243\4\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\u0138\5\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\2\7\2\0"+
    "\1\7\1\u0155\1\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\1\u0156\3\7\1\0\2\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\13\0\2\7\1\76\3\0\1\76\1\7"+
    "\1\u014b\4\7\1\76\4\7\1\0\2\7\2\0\2\7"+
    "\10\0\1\u0157\2\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\6\7\3\76\4\7\13\0\2\7\1\76"+
    "\3\0\1\76\6\7\1\76\4\7\1\0\2\7\2\0"+
    "\2\7\10\0\3\7\1\0\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\3\7\1\364\2\7\3\76\4\7\13\0"+
    "\2\7\1\76\3\0\1\76\6\7\1\76\4\7\1\0"+
    "\2\7\2\0\2\7\10\0\3\7\1\0\1\7\1\u0158"+
    "\2\0\3\7\1\0\1\7\1\0\6\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\1\u0159"+
    "\1\7\2\0\3\7\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\2\7\2\0\2\7\10\0\3\7\1\0"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\3\7\1\u015a"+
    "\2\7\3\76\4\7\13\0\2\7\1\76\3\0\1\76"+
    "\6\7\1\76\4\7\1\0\1\u015b\1\7\2\0\2\7"+
    "\10\0\3\7\1\0\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\3\76\4\7\13\0\2\7\1\76\3\0"+
    "\1\76\1\7\1\271\4\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\3\76\4\7\13\0\2\7"+
    "\1\76\3\0\1\76\6\7\1\76\4\7\1\0\2\7"+
    "\2\0\2\7\10\0\3\7\1\0\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\3\7\1\u015c\2\7\3\76\4\7"+
    "\13\0\2\7\1\76\3\0\1\76\6\7\1\76\4\7"+
    "\1\0\2\7\2\0\2\7\10\0\3\7\1\0\2\7"+
    "\2\0\2\7\1\u014f\1\0\1\7\1\0\6\7\3\76"+
    "\4\7\13\0\2\7\1\76\3\0\1\76\6\7\1\76"+
    "\4\7\1\0\1\340\1\7\2\0\2\7\10\0\3\7"+
    "\1\0\2\7\2\0\3\7\1\0\1\7\1\0\6\7"+
    "\3\76\4\7\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21229];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\24\1\1\11\1\1\1\11\1\1\2\11"+
    "\7\1\1\11\12\1\4\11\1\1\1\11\1\1\1\11"+
    "\1\0\1\1\1\0\2\11\5\1\7\0\15\1\1\0"+
    "\4\1\4\11\5\1\1\0\2\1\1\11\3\1\1\11"+
    "\1\1\2\11\13\1\2\11\4\1\1\11\7\1\1\11"+
    "\2\1\1\11\10\1\2\11\1\0\1\1\1\11\3\1"+
    "\1\0\1\11\20\1\1\11\13\1\1\0\1\11\71\1"+
    "\1\0\50\1\1\0\35\1\1\0\16\1\1\0\1\11"+
    "\6\1\1\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

StringBuilder string = new StringBuilder();

private CppToken createToken(String name, String value) {
    return new CppToken(name, value, yyline, yycolumn);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public CppToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
          case 60: break;
          case 2: 
            { 
            }
          case 61: break;
          case 3: 
            { return createToken("operator","division");
            }
          case 62: break;
          case 4: 
            { return createToken("operator", "asterisk");
            }
          case 63: break;
          case 5: 
            { return createToken("identifier", yytext());
            }
          case 64: break;
          case 6: 
            { return createToken("number", yytext());
            }
          case 65: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 66: break;
          case 8: 
            { return createToken("operator","addition");
            }
          case 67: break;
          case 9: 
            { return createToken("operator","subtraction");
            }
          case 68: break;
          case 10: 
            { return createToken("operator","lessThan");
            }
          case 69: break;
          case 11: 
            { return createToken("operator","modulus");
            }
          case 70: break;
          case 12: 
            { return createToken("operator", "bracesLeft");
            }
          case 71: break;
          case 13: 
            { return createToken("operator","greaterThan");
            }
          case 72: break;
          case 14: 
            { return createToken("operator", "bracesRight");
            }
          case 73: break;
          case 15: 
            { return createToken("operator", "colon");
            }
          case 74: break;
          case 16: 
            { return createToken("operator", "bracketsRight");
            }
          case 75: break;
          case 17: 
            { return createToken("operator", "preProcessor");
            }
          case 76: break;
          case 18: 
            { return createToken("operator","bitAnd");
            }
          case 77: break;
          case 19: 
            { return createToken("operator","xor");
            }
          case 78: break;
          case 20: 
            { return createToken("operator","bitNot");
            }
          case 79: break;
          case 21: 
            { return createToken("operator","not");
            }
          case 80: break;
          case 22: 
            { return createToken("operator","assignment");
            }
          case 81: break;
          case 23: 
            { return createToken("operator", "parenthesesLeft");
            }
          case 82: break;
          case 24: 
            { return createToken("operator", "parenthesesRight");
            }
          case 83: break;
          case 25: 
            { return createToken("operator", "comma");
            }
          case 84: break;
          case 26: 
            { return createToken("operator", "semiColon");
            }
          case 85: break;
          case 27: 
            { string.append(yytext());
            }
          case 86: break;
          case 28: 
            { yybegin(YYINITIAL);
            }
          case 87: break;
          case 29: 
            { yybegin(YYINITIAL); return createToken("string", string.toString());
            }
          case 88: break;
          case 30: 
            { return createToken("operator","divAssign");
            }
          case 89: break;
          case 31: 
            { return createToken("operator","multAssign");
            }
          case 90: break;
          case 32: 
            { return createToken("operator","or");
            }
          case 91: break;
          case 33: 
            { return createToken("operator","increment");
            }
          case 92: break;
          case 34: 
            { return createToken("operator","addAssign");
            }
          case 93: break;
          case 35: 
            { return createToken("operator","decrement");
            }
          case 94: break;
          case 36: 
            { return createToken("operator","subAssign");
            }
          case 95: break;
          case 37: 
            { return createToken("operator","leftShift");
            }
          case 96: break;
          case 38: 
            { String str = yytext();
                        str = str.substring(1, str.length()-1);
                        return createToken("header", str);
            }
          case 97: break;
          case 39: 
            { return createToken("operator", "bracketsLeft");
            }
          case 98: break;
          case 40: 
            { return createToken("operator","greaterEqTo");
            }
          case 99: break;
          case 41: 
            { return createToken("operator","modAssign");
            }
          case 100: break;
          case 42: 
            { return createToken("operator","rightShift");
            }
          case 101: break;
          case 43: 
            { return createToken("operator","lessEqTo");
            }
          case 102: break;
          case 44: 
            { return createToken("keyword", yytext());
            }
          case 103: break;
          case 45: 
            { return createToken("operator","and");
            }
          case 104: break;
          case 46: 
            { return createToken("operator","andAssign");
            }
          case 105: break;
          case 47: 
            { return createToken("operator","xorAssign");
            }
          case 106: break;
          case 48: 
            { return createToken("operator","notEqualsTo");
            }
          case 107: break;
          case 49: 
            { return createToken("operator","equalsTo");
            }
          case 108: break;
          case 50: 
            { string.append( '\b' );
            }
          case 109: break;
          case 51: 
            { string.append( '\t' );
            }
          case 110: break;
          case 52: 
            { return createToken("character_literal", yytext());
            }
          case 111: break;
          case 53: 
            { return createToken("operator", "ellipsis");
            }
          case 112: break;
          case 54: 
            { return createToken("operator","leftShiftAssign");
            }
          case 113: break;
          case 55: 
            { return createToken("operator","rightShiftAssign");
            }
          case 114: break;
          case 56: 
            { return createToken("boolean", yytext());
            }
          case 115: break;
          case 57: 
            { return createToken("operator","bitOr");
            }
          case 116: break;
          case 58: 
            { return createToken("operator","orAssign");
            }
          case 117: break;
          case 59: 
            { return createToken("operator", "macro");
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
