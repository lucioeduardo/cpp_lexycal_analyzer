/* The following code was generated by JFlex 1.6.1 */

package br.ufal.compiladores;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/Estudo/Git/cpp_lexycal_analyzer/lexicalanalyzer/src/br/ufal/compiladores/cpp.flex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\4\1\4\1\3\22\0\1\1\1\52\1\73"+
    "\1\35\1\0\1\27\1\41\1\103\1\74\1\75\1\5\1\101\1\76"+
    "\1\102\1\100\1\2\1\12\1\21\1\66\1\65\2\10\1\64\3\10"+
    "\1\33\1\77\1\26\1\54\1\31\2\0\1\13\1\20\4\13\5\6"+
    "\1\23\10\6\1\25\2\6\1\16\2\6\1\0\1\11\1\34\1\44"+
    "\1\55\1\0\1\36\1\17\1\46\1\40\1\56\1\14\1\60\1\63"+
    "\1\53\1\6\1\62\1\22\1\47\1\37\1\42\1\50\1\57\1\43"+
    "\1\61\1\51\1\24\1\71\1\70\1\15\1\67\1\72\1\30\1\7"+
    "\1\32\1\45\6\0\1\4\u1fa2\0\1\4\1\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\2\2\6"+
    "\5\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\3\5\1\17\2\5\1\20\1\21\4\5\1\22"+
    "\1\5\1\23\5\5\1\1\1\24\1\25\1\26\1\27"+
    "\1\1\1\30\1\31\1\1\1\2\1\0\1\32\1\33"+
    "\1\5\1\34\3\6\2\0\15\5\1\0\1\35\1\11"+
    "\1\36\1\37\1\40\1\16\1\41\1\42\1\43\1\37"+
    "\10\5\1\44\2\5\1\45\1\46\1\34\3\5\1\47"+
    "\13\5\1\50\1\44\1\5\1\51\14\5\2\0\1\52"+
    "\1\53\1\54\1\55\2\0\6\6\2\5\1\44\2\5"+
    "\1\20\10\5\1\56\1\0\1\57\2\5\1\45\2\5"+
    "\1\22\55\5\1\60\1\61\10\5\1\0\24\5\1\44"+
    "\22\5\1\62\1\0\11\5\1\63\5\5\1\44\1\21"+
    "\13\5\1\47\1\17\1\0\1\46\1\5\1\50\15\5"+
    "\1\44\1\64\5\5\1\0\4\5\1\44\7\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\104\0\u03fc\0\104\0\u0440\0\104\0\104\0\u0484\0\u04c8"+
    "\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c\0\104\0\u0660\0\u06a4"+
    "\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4"+
    "\0\u0908\0\u094c\0\u0990\0\104\0\104\0\104\0\104\0\u09d4"+
    "\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\104\0\104\0\u0b6c"+
    "\0\u0110\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68"+
    "\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1078\0\104\0\u1078"+
    "\0\u1078\0\u1100\0\104\0\u1144\0\104\0\104\0\u1188\0\u11cc"+
    "\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec"+
    "\0\u1430\0\104\0\104\0\u1474\0\u14b8\0\u14fc\0\u1540\0\104"+
    "\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760"+
    "\0\u17a4\0\u17e8\0\u182c\0\104\0\u1870\0\u18b4\0\104\0\u18f8"+
    "\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18"+
    "\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\104\0\104\0\104"+
    "\0\104\0\u1cb0\0\u1cf4\0\u1d38\0\104\0\u1d7c\0\u1dc0\0\u1e04"+
    "\0\u1e48\0\u1e8c\0\u1ed0\0\u0110\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u1078"+
    "\0\u2200\0\104\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8"+
    "\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8"+
    "\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8"+
    "\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18"+
    "\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38"+
    "\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\104\0\104\0\u2fd0"+
    "\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0"+
    "\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410"+
    "\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630"+
    "\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850"+
    "\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70"+
    "\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u0110"+
    "\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c"+
    "\0\u3eb0\0\u3ef4\0\u0110\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048"+
    "\0\u408c\0\u0110\0\u40d0\0\u4114\0\u4158\0\u419c\0\u41e0\0\u4224"+
    "\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u0110\0\u0110\0\u43bc"+
    "\0\u0110\0\u4400\0\u0110\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554"+
    "\0\u4598\0\u45dc\0\u4620\0\u4664\0\u46a8\0\u46ec\0\u4730\0\u4774"+
    "\0\u47b8\0\104\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950"+
    "\0\u4994\0\u49d8\0\u4a1c\0\u4a60\0\104\0\u4aa4\0\u4ae8\0\u4b2c"+
    "\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\0\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\6\1\12\1\13\1\6\1\14"+
    "\1\6\1\10\1\15\1\6\1\16\1\6\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\6\1\46\1\6"+
    "\1\47\1\50\2\6\3\10\1\6\1\51\1\52\1\6"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\106\0\1\64\2\0\1\65\46\0\1\66\103\0"+
    "\1\67\35\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\1\6\1\71"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\21\0\1\10\1\0\1\10\6\0\1\10"+
    "\1\72\1\73\2\74\36\0\3\10\32\0\2\75\2\76"+
    "\1\0\1\72\1\73\2\74\64\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\1\77\3\6\10\0\1\100\2\6"+
    "\1\0\1\101\1\102\2\0\4\6\1\0\1\103\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\1\104\1\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\1\105\1\106\2\0\4\6\1\0"+
    "\1\107\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\1\110\1\6\2\0\4\6\1\0\1\111\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\1\6\1\112\1\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\4\6\1\113\2\6"+
    "\3\70\4\6\11\0\26\114\1\115\1\116\1\114\1\117"+
    "\1\114\1\120\20\114\1\121\27\114\31\0\1\23\1\0"+
    "\1\122\20\0\1\123\60\0\1\124\22\0\1\125\60\0"+
    "\1\126\60\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\1\127\1\6\1\130\1\6\10\0\1\6\1\131\1\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\4\6"+
    "\1\132\2\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\2\6\1\133\1\6\10\0\1\134"+
    "\2\6\1\0\1\135\1\6\2\0\4\6\1\0\1\6"+
    "\1\0\1\6\1\136\5\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\1\137\1\6\2\0\4\6\1\0\1\6\1\0"+
    "\1\6\1\140\5\6\3\70\1\141\3\6\52\0\1\142"+
    "\12\0\1\143\35\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\1\6\1\144\2\0"+
    "\2\6\1\145\1\6\1\0\1\6\1\0\7\6\3\70"+
    "\2\6\1\146\1\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\1\6\1\147\5\6\3\70"+
    "\4\6\65\0\1\150\35\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\1\151\3\6\10\0\1\152\2\6\1\0"+
    "\1\153\1\6\2\0\4\6\1\0\1\6\1\0\6\6"+
    "\1\154\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\2\6\1\155\1\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\2\6\1\156\1\6\10\0\3\6\1\0\1\6\1\157"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\1\6\1\160\2\0\4\6\1\0"+
    "\1\6\1\0\1\6\1\161\4\6\1\162\3\70\1\163"+
    "\3\6\65\0\1\164\35\0\2\6\1\70\1\0\1\70"+
    "\1\6\1\165\4\6\1\70\4\6\10\0\1\6\1\166"+
    "\1\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\65\0\1\167\35\0\2\6\1\70"+
    "\1\0\1\70\2\6\1\170\3\6\1\70\1\171\3\6"+
    "\10\0\1\6\1\172\1\6\1\0\1\6\1\173\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\1\130\1\6\2\0\4\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\174\1\0\1\175\1\0\6\6\1\176"+
    "\3\70\1\6\1\177\2\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\1\200\3\6\1\0\1\6\1\0\6\6\1\201"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\1\202\1\6\2\0"+
    "\4\6\1\0\1\203\1\0\7\6\3\70\4\6\56\0"+
    "\1\204\136\0\1\205\57\0\1\206\24\0\1\207\56\0"+
    "\1\210\25\0\1\211\1\0\3\212\1\0\5\212\1\0"+
    "\71\212\1\0\3\64\2\0\77\64\5\65\1\213\76\65"+
    "\10\0\1\70\1\0\1\70\6\0\1\70\42\0\3\70"+
    "\37\0\1\214\1\0\2\215\101\0\1\214\2\215\100\0"+
    "\1\216\1\217\67\0\2\220\1\0\3\220\2\0\3\220"+
    "\14\0\1\220\1\0\1\220\5\0\1\220\7\0\1\220"+
    "\5\0\3\220\27\0\1\221\6\0\1\221\70\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\1\222\1\6\2\0\4\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\1\223\3\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\1\6\1\224\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\225\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\1\6\1\226\1\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\1\6\1\227\2\0\4\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\1\230"+
    "\1\6\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\1\6\1\231\5\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\232\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\1\6\1\233\1\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\1\6\1\234\1\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\2\6\1\235\1\0\2\6\2\0\4\6\1\0"+
    "\1\236\1\0\4\6\1\237\2\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\110\1\0"+
    "\7\6\3\70\4\6\11\0\31\114\1\117\103\114\1\117"+
    "\22\114\1\240\27\114\27\0\1\241\130\0\1\242\35\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\243\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\3\6\1\244\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\2\6\1\245\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\1\6\1\224\2\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\1\246\3\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\1\6\1\247\2\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\250\1\0\1\6\1\0"+
    "\1\6\1\251\5\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\1\6\1\224\2\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\2\6\1\252\1\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\1\6\1\253"+
    "\4\6\1\70\1\254\3\6\10\0\3\6\1\0\2\6"+
    "\2\0\1\255\3\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\1\6\1\256\1\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\1\257\6\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\1\6\1\260\5\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\1\0\1\6\1\261\5\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\262\1\0"+
    "\1\263\1\0\3\6\1\264\3\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\1\265\2\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\3\6\1\266\1\0\1\6\1\0\4\6\1\234"+
    "\2\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\1\6\1\267\1\6\1\0"+
    "\2\6\2\0\1\6\1\270\2\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\1\271\2\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\272\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\4\6\1\273\1\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\1\274\2\6\1\0\1\275"+
    "\1\6\2\0\4\6\1\0\1\276\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\2\6\1\234\1\6\10\0\3\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\1\224\3\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\1\6\1\277\2\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\1\6\1\300\2\0\4\6\1\0\1\301\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\2\6\1\302\1\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\1\6\1\303\1\235\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\1\304\3\6"+
    "\10\0\3\6\1\0\2\6\2\0\1\305\2\6\1\224"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\2\6\1\306\1\307\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\310\1\0\4\6\1\234\2\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\2\6\1\132\1\6\10\0\2\6\1\311\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\1\6\1\312\2\0\4\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\1\313"+
    "\2\6\1\0\1\6\1\314\2\0\4\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\3\6\1\315\3\6"+
    "\3\70\3\6\1\316\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\1\317\1\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\320"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\6\6\1\321\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\322\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\1\323\3\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\324\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\1\6\1\325\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\104\0"+
    "\1\117\110\0\1\326\106\0\1\327\2\65\1\3\2\65"+
    "\1\213\76\65\24\0\2\215\100\0\1\215\104\0\1\215"+
    "\67\0\2\220\1\0\3\220\2\0\3\220\1\72\1\73"+
    "\2\74\10\0\1\220\1\0\1\220\5\0\1\220\7\0"+
    "\1\220\5\0\3\220\27\0\1\221\6\0\1\221\1\72"+
    "\1\73\2\74\64\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\1\330\2\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\4\6\1\234\2\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\1\6\1\331"+
    "\5\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\1\230\2\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\1\332\6\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\1\224\3\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\1\333\2\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\1\334\2\6\1\0\1\335\1\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\3\6\1\224"+
    "\3\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\1\6\1\224\5\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\1\6\1\310\5\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\1\336\1\6\2\0\4\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\337\1\0\7\6\3\70\4\6"+
    "\44\0\1\340\56\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\1\0\3\6\1\341\3\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\1\224\1\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\1\342\6\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\1\343\3\6\10\0\3\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\1\6\1\344\5\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\1\345\6\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\2\6"+
    "\1\346\3\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\4\6\1\322\1\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\1\347"+
    "\2\6\1\0\2\6\2\0\4\6\1\0\1\111\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\1\6\1\350\5\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\1\351\3\6\10\0\3\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\1\352"+
    "\2\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\1\6\1\353\5\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\1\6\1\354\2\0\4\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\1\6\1\355\2\0\4\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\2\6\1\356\1\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\1\6\1\357\1\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\360\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\4\6\1\301\2\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\1\361\3\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\3\6\1\362\1\0\1\6\1\0"+
    "\4\6\1\363\2\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\2\6\1\364\1\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\1\6\1\365"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\1\252\2\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\1\366\3\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\1\0\3\6\1\367\3\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\370\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\2\6\1\371\1\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\2\6\1\372\1\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\1\136\1\6\2\0\4\6"+
    "\1\0\1\6\1\0\1\6\1\373\5\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\4\6\1\224\2\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\1\6"+
    "\1\374\5\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\2\6\1\235\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\111\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\1\375\3\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\1\376\3\6\10\0\3\6\1\0\1\317\1\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\1\6\1\356\5\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\1\6\1\224\4\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\310\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\1\101\1\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\377\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\2\6\1\u0100\1\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\1\6\1\u0101\1\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\1\6"+
    "\1\u0102\5\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\1\6"+
    "\1\330\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\3\6\1\266"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\1\u0103"+
    "\2\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\1\234\3\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\1\u0104\2\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\2\6\1\224"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\u0105\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\224\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\1\6\1\324\1\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\1\0\1\6\1\u0106\5\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\5\6\1\224\1\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\1\6"+
    "\1\u0107\1\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\1\6"+
    "\1\u0108\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\1\6\1\224\1\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\3\6\1\315\3\6\3\70\4\6\44\0\1\u0109\56\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\1\6\1\u010a\1\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\1\6\1\u010b"+
    "\5\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\2\6\1\u010c\1\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\4\6\1\u010d\2\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\1\6\1\u010e\5\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\1\u010f\3\6\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\2\6\1\u0110\1\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\3\6\1\234\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\u0111\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\1\6"+
    "\1\u0112\2\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\2\6\1\u0113\4\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\1\u0114"+
    "\2\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\1\6\1\u0115"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\1\6\1\336\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\u0116\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\1\0\4\6\1\u0117\2\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\6\6\1\224\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\u0118\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\3\6\1\u0119"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\1\u011a\3\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\u011b\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\1\70\1\u011c\1\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\u011d\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\1\6\1\u011e\2\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\1\6\1\u011f\5\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\1\350\2\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\1\371\3\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\1\u0120\2\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\1\6\1\u0121\1\235\1\0\2\6\2\0\4\6"+
    "\1\0\1\324\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\2\6\1\u0122\1\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\u0123\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\u0124"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\1\330\3\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\1\6\1\324\5\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\1\310\1\6\2\0\4\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\1\6"+
    "\1\u0125\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\3\6\1\201"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\2\6\1\226\1\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\2\6\1\u0126\4\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\2\6\1\u0127\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\46\0"+
    "\1\u0128\54\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\1\301\2\6\1\0\1\310\1\6\2\0"+
    "\4\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\6\1\0"+
    "\2\6\1\u0129\4\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\3\6\1\101\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\2\6"+
    "\1\u012a\1\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\2\6\1\u012b\4\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\1\6"+
    "\1\u012c\5\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\1\330\3\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\1\u012d\3\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\u012e\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\312\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\u0122\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\1\6\1\u012f\5\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\3\6\1\u0130"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\1\6"+
    "\1\u0131\1\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\1\u0132\1\u0133\5\6"+
    "\3\70\4\6\21\0\1\70\1\0\1\70\6\0\1\70"+
    "\42\0\1\u0134\2\70\25\0\1\70\1\0\1\70\6\0"+
    "\1\70\42\0\2\70\1\u0134\23\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\1\224\3\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\1\224\2\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\1\u0135\3\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\2\6\1\u0136\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\1\u0137\2\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\2\6\1\234"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\1\u0138"+
    "\3\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\1\u0139\3\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\1\330\6\6\3\70"+
    "\4\6\46\0\1\u013a\54\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\1\u013b\2\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\2\6\1\330\1\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\2\6\1\234\1\6\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\1\u013c\3\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\1\6\1\u013d\2\0\4\6"+
    "\1\0\1\6\1\0\7\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\1\6"+
    "\1\101\5\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\2\6\1\234\1\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\1\u013e"+
    "\3\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\2\6\1\u013f\3\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\21\0\1\70\1\0"+
    "\1\70\6\0\1\70\33\0\1\u0140\6\0\3\70\23\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\u0101\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\1\u0141\6\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\1\6\1\234"+
    "\2\6\1\0\1\6\1\0\7\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\0\1\330\1\0"+
    "\7\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\1\0\1\u0142\6\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\1\234\3\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\1\u0132\6\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\3\6\1\0\2\6\2\0\2\6"+
    "\1\u0143\1\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\1\u0144\2\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\2\6\1\101\1\6\1\0\1\6\1\0"+
    "\7\6\3\70\4\6\62\0\1\u0145\40\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\1\u0146\3\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\7\6"+
    "\3\70\4\6\17\0\2\6\1\70\1\0\1\70\6\6"+
    "\1\70\4\6\10\0\1\u0147\2\6\1\0\2\6\2\0"+
    "\1\u013e\3\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\1\6\1\u0148\2\0\4\6\1\0"+
    "\1\6\1\0\7\6\3\70\4\6\17\0\2\6\1\70"+
    "\1\0\1\70\6\6\1\70\4\6\10\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\1\0\4\6\1\330"+
    "\2\6\3\70\4\6\17\0\2\6\1\70\1\0\1\70"+
    "\6\6\1\70\4\6\10\0\3\6\1\0\1\u0149\1\6"+
    "\2\0\4\6\1\0\1\6\1\0\7\6\3\70\4\6"+
    "\17\0\2\6\1\70\1\0\1\70\6\6\1\70\4\6"+
    "\10\0\3\6\1\0\2\6\2\0\4\6\1\0\1\6"+
    "\1\0\4\6\1\u014a\2\6\3\70\4\6\17\0\2\6"+
    "\1\70\1\0\1\70\6\6\1\70\4\6\10\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\1\0\1\6"+
    "\1\u014b\5\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\1\226\3\6\1\0\1\6\1\0\7\6\3\70"+
    "\4\6\17\0\2\6\1\70\1\0\1\70\6\6\1\70"+
    "\4\6\10\0\3\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\1\0\4\6\1\u014c\2\6\3\70\4\6\17\0"+
    "\2\6\1\70\1\0\1\70\6\6\1\70\4\6\10\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\u013c\1\0\1\6"+
    "\1\0\7\6\3\70\4\6\17\0\2\6\1\70\1\0"+
    "\1\70\6\6\1\70\4\6\10\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\1\0\1\6\1\317\5\6"+
    "\3\70\4\6\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19584];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\15\1\1\11\1\1\1\11\1\1\2\11"+
    "\7\1\1\11\15\1\4\11\5\1\1\0\2\11\5\1"+
    "\2\0\15\1\1\0\2\1\1\11\3\1\1\11\1\1"+
    "\2\11\13\1\2\11\4\1\1\11\13\1\1\11\2\1"+
    "\1\11\14\1\2\0\4\11\2\0\1\1\1\11\23\1"+
    "\1\0\1\11\63\1\2\11\10\1\1\0\50\1\1\0"+
    "\36\1\1\0\21\1\1\11\5\1\1\0\4\1\1\11"+
    "\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private CppToken createToken(String name, String value) {
    return new CppToken(name, value, yyline, yycolumn);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public CppToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
          case 53: break;
          case 2: 
            { 
            }
          case 54: break;
          case 3: 
            { return createToken("operator","division");
            }
          case 55: break;
          case 4: 
            { return createToken("operator", "asterisk");
            }
          case 56: break;
          case 5: 
            { return createToken("identifier", yytext());
            }
          case 57: break;
          case 6: 
            { return createToken("integer", yytext());
            }
          case 58: break;
          case 7: 
            { return createToken("operator","lessThan");
            }
          case 59: break;
          case 8: 
            { return createToken("operator","modulus");
            }
          case 60: break;
          case 9: 
            { return createToken("operator", "bracesLeft");
            }
          case 61: break;
          case 10: 
            { return createToken("operator","greaterThan");
            }
          case 62: break;
          case 11: 
            { return createToken("operator", "bracesRight");
            }
          case 63: break;
          case 12: 
            { return createToken("operator", "colon");
            }
          case 64: break;
          case 13: 
            { return createToken("operator", "bracketsRight");
            }
          case 65: break;
          case 14: 
            { return createToken("operator", "preProcessor");
            }
          case 66: break;
          case 15: 
            { return createToken("operator","bitAnd");
            }
          case 67: break;
          case 16: 
            { return createToken("operator","xor");
            }
          case 68: break;
          case 17: 
            { return createToken("operator","bitNot");
            }
          case 69: break;
          case 18: 
            { return createToken("operator","not");
            }
          case 70: break;
          case 19: 
            { return createToken("operator","assignment");
            }
          case 71: break;
          case 20: 
            { return createToken("operator", "parenthesesLeft");
            }
          case 72: break;
          case 21: 
            { return createToken("operator", "parenthesesRight");
            }
          case 73: break;
          case 22: 
            { return createToken("operator", "comma");
            }
          case 74: break;
          case 23: 
            { return createToken("operator", "semiColon");
            }
          case 75: break;
          case 24: 
            { return createToken("operator","addition");
            }
          case 76: break;
          case 25: 
            { return createToken("operator","subtraction");
            }
          case 77: break;
          case 26: 
            { return createToken("operator","divAssign");
            }
          case 78: break;
          case 27: 
            { return createToken("operator","multAssign");
            }
          case 79: break;
          case 28: 
            { return createToken("operator","or");
            }
          case 80: break;
          case 29: 
            { return createToken("operator","leftShift");
            }
          case 81: break;
          case 30: 
            { String str = yytext();
                    str = str.substring(1, str.length()-1);
                    return createToken("header", str);
            }
          case 82: break;
          case 31: 
            { return createToken("operator", "bracketsLeft");
            }
          case 83: break;
          case 32: 
            { return createToken("operator","greaterEqTo");
            }
          case 84: break;
          case 33: 
            { return createToken("operator","modAssign");
            }
          case 85: break;
          case 34: 
            { return createToken("operator","rightShift");
            }
          case 86: break;
          case 35: 
            { return createToken("operator","lessEqTo");
            }
          case 87: break;
          case 36: 
            { return createToken("keyword", yytext());
            }
          case 88: break;
          case 37: 
            { return createToken("operator","and");
            }
          case 89: break;
          case 38: 
            { return createToken("operator","andAssign");
            }
          case 90: break;
          case 39: 
            { return createToken("operator","xorAssign");
            }
          case 91: break;
          case 40: 
            { return createToken("operator","notEqualsTo");
            }
          case 92: break;
          case 41: 
            { return createToken("operator","equalsTo");
            }
          case 93: break;
          case 42: 
            { return createToken("operator","addAssign");
            }
          case 94: break;
          case 43: 
            { return createToken("operator","increment");
            }
          case 95: break;
          case 44: 
            { return createToken("operator","subAssign");
            }
          case 96: break;
          case 45: 
            { return createToken("operator","decrement");
            }
          case 97: break;
          case 46: 
            { return createToken("operator","leftShiftAssign");
            }
          case 98: break;
          case 47: 
            { return createToken("operator","rightShiftAssign");
            }
          case 99: break;
          case 48: 
            { return createToken("operator", "ellipsis");
            }
          case 100: break;
          case 49: 
            { return createToken("character_literal", yytext());
            }
          case 101: break;
          case 50: 
            { return createToken("operator","bitOr");
            }
          case 102: break;
          case 51: 
            { return createToken("operator","orAssign");
            }
          case 103: break;
          case 52: 
            { return createToken("operator", "macro");
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
